from context_store import ContextStore
from adapters.email_index import EmailIndexAdapter

store = ContextStore()
adapter = EmailIndexAdapter()

@app.on_event("startup")
async def seed_index():
    ctx = store.get_context(user_id="demo")  # Use your actual user_id logic
    if not ctx.get("email_index"):
        adapter.load_initial_index(ctx, source="mock")
        store.update_context("demo", ctx)


@app.route("/")
def index():
    # Clear chat and any old email results for a fresh start
    session.pop("chat_history", None)
    session.pop("last_category", None)
    return render_template("chat.html")

Create two files with valid JSON arrays and no comments:
1) email_training_data.json — 160 items, 20 per label across: HR, IT, Finance, Security, pending_approval, appreciation, scam, important_emails. Fields: subject, body, label. Corporate‑style, safe, no PII, varied wording; bodies 25–120 words; scam items use [malicious-link] placeholders.
2) question_training_data.json — 160 items, 20 per label with the same labels. Fields: question, label. Short (4–12 words), diverse phrasings (show/list/find/what are/etc).

Ensure both files are valid JSON (no trailing commas) and balanced by label.


[
  {
    "subject": "Annual benefits enrollment opens next week",
    "body": "Please log into the HR portal to select your health, dental, and vision coverage for the upcoming year. Enrollment closes on September 15.",
    "label": "HR"
  },
  {
    "subject": "New company holiday policy update",
    "body": "HR has updated the holiday schedule for 2025. Please review the attached calendar and plan your leave accordingly.",
    "label": "HR"
  },
  {
    "subject": "Payroll schedule adjustment due to bank holiday",
    "body": "Paychecks will be deposited one day earlier this month because of the upcoming federal holiday.",
    "label": "HR"
  },
  {
    "subject": "VPN access issue affecting remote logins",
    "body": "Our IT team is investigating a VPN authentication error. If you are unable to connect, please raise a ticket in the IT helpdesk.",
    "label": "IT"
  },
  {
    "subject": "System maintenance scheduled for Saturday",
    "body": "We will perform server updates between 2 AM and 6 AM EST. Applications may be unavailable during this time.",
    "label": "IT"
  },
  {
    "subject": "Multi-factor authentication now required",
    "body": "Starting Monday, all users must enable MFA when logging in to corporate applications. Follow the instructions on the intranet to set it up.",
    "label": "IT"
  },
  {
    "subject": "Expense reimbursement deadline approaching",
    "body": "Submit your outstanding business expense claims by August 31 to ensure they are processed in the current quarter.",
    "label": "Finance"
  },
  {
    "subject": "Quarterly budget review meeting",
    "body": "Finance will hold the Q3 budget review next Tuesday at 2 PM. Please prepare your departmental reports.",
    "label": "Finance"
  },
  {
    "subject": "Updated travel policy for 2025",
    "body": "The finance department has updated per diem rates and flight booking guidelines. See the attached policy document.",
    "label": "Finance"
  },
  {
    "subject": "Security awareness training required",
    "body": "All employees must complete the annual phishing and data protection training by September 30.",
    "label": "Security"
  },
  {
    "subject": "Suspicious login detected on your account",
    "body": "Security has flagged a login from an unusual location. If this was not you, reset your password immediately.",
    "label": "Security"
  },
  {
    "subject": "Badge access temporarily restricted",
    "body": "Due to a system update, some employees may experience badge scanning issues at the main entrance. Security is working to resolve it.",
    "label": "Security"
  },
  {
    "subject": "Welcome to the onboarding program",
    "body": "We’re excited to have you join the company. Please complete the new hire documents and attend orientation on your first day.",
    "label": "HR"
  },
  {
    "subject": "Printer toner replacement request",
    "body": "The 4th floor printer is out of toner. IT has been notified and will replace the cartridge today.",
    "label": "IT"
  },
  {
    "subject": "Final reminder: tax document submission",
    "body": "Submit your W-4 updates by the end of the month to ensure accurate payroll tax deductions.",
    "label": "Finance"
  },
  {
    "subject": "New phishing scam targeting employees",
    "body": "Security has identified a fraudulent email campaign impersonating HR. Do not click any suspicious links.",
    "label": "Security"
  },
  {
    "subject": "Laptop replacement program",
    "body": "IT will be replacing laptops older than 4 years. Eligible employees will be contacted with replacement details.",
    "label": "IT"
  },
  {
    "subject": "Health and wellness fair invitation",
    "body": "Join us for the annual wellness fair featuring free health screenings, nutrition workshops, and giveaways.",
    "label": "HR"
  },
  {
    "subject": "Budget surplus allocation discussion",
    "body": "Finance will meet with department heads to discuss how to allocate the Q4 budget surplus.",
    "label": "Finance"
  },
  {
    "subject": "Password reset policy change",
    "body": "Security is reducing the password expiration period to 60 days. All accounts must comply starting October 1.",
    "label": "Security"
  },

  // ===== New Categories =====

  {
    "subject": "Purchase order awaiting approval",
    "body": "The purchase order for office furniture requires your approval before it can be processed. Please review it in the system.",
    "label": "pending_approval"
  },
  {
    "subject": "Leave request pending your review",
    "body": "An employee leave request for September 10-14 is awaiting your approval in the HR portal.",
    "label": "pending_approval"
  },
  {
    "subject": "Contract renewal requires sign-off",
    "body": "The vendor contract renewal for software licensing is pending your approval. Deadline is August 20.",
    "label": "pending_approval"
  },
  {
    "subject": "Great job on the Q2 project delivery",
    "body": "Your leadership and dedication were key to meeting the Q2 project deadlines. Well done!",
    "label": "appreciation"
  },
  {
    "subject": "Thank you for assisting with the client meeting",
    "body": "Your support during the presentation made a huge difference. We appreciate your efforts.",
    "label": "appreciation"
  },
  {
    "subject": "Kudos for process improvement initiative",
    "body": "Your idea to automate the approval workflow saved significant time. Kudos!",
    "label": "appreciation"
  },
  {
    "subject": "Bank account verification needed",
    "body": "We noticed unusual activity in your bank account. Click the link to verify your details immediately.",
    "label": "scam"
  },
  {
    "subject": "Your tax refund is waiting",
    "body": "You are eligible for a tax refund. Submit your personal details via the attached form to claim it.",
    "label": "scam"
  },
  {
    "subject": "Prize notification: you have won",
    "body": "Congratulations! You have won a $500 gift card. Provide your card number to receive the reward.",
    "label": "scam"
  },
  {
    "subject": "Meeting with CEO at 10 AM",
    "body": "Join the CEO in the boardroom for an important strategic planning session.",
    "label": "important_emails"
  },
  {
    "subject": "Client escalation — urgent attention needed",
    "body": "A key client has raised an urgent concern about the ongoing project. Please address immediately.",
    "label": "important_emails"
  },
  {
    "subject": "Board of Directors quarterly report review",
    "body": "The board requires your review of the quarterly performance report by Friday.",
    "label": "important_emails"
  }
]


[
  {
    "question": "Show me the latest HR announcements",
    "label": "HR"
  },
  {
    "question": "What is the updated holiday schedule?",
    "label": "HR"
  },
  {
    "question": "List all benefits enrollment emails",
    "label": "HR"
  },
  {
    "question": "Display all open IT tickets",
    "label": "IT"
  },
  {
    "question": "Are there any planned system maintenance events?",
    "label": "IT"
  },
  {
    "question": "Find all VPN-related issues in my inbox",
    "label": "IT"
  },
  {
    "question": "Show me pending expense reimbursements",
    "label": "Finance"
  },
  {
    "question": "List finance policy updates",
    "label": "Finance"
  },
  {
    "question": "What are the latest budget meeting invites?",
    "label": "Finance"
  },
  {
    "question": "Do I have any security alerts?",
    "label": "Security"
  },
  {
    "question": "Show emails about phishing or suspicious logins",
    "label": "Security"
  },
  {
    "question": "List security policy changes",
    "label": "Security"
  },
  {
    "question": "Which purchase orders are still awaiting approval?",
    "label": "pending_approval"
  },
  {
    "question": "Show leave requests pending my review",
    "label": "pending_approval"
  },
  {
    "question": "List contracts that require sign-off",
    "label": "pending_approval"
  },
  {
    "question": "Show all appreciation messages",
    "label": "appreciation"
  },
  {
    "question": "Any kudos or thank you notes for me?",
    "label": "appreciation"
  },
  {
    "question": "List recognition emails from my manager",
    "label": "appreciation"
  },
  {
    "question": "Do I have any scam or phishing emails?",
    "label": "scam"
  },
  {
    "question": "List suspicious prize or refund notifications",
    "label": "scam"
  },
  {
    "question": "Show me fake bank or tax emails",
    "label": "scam"
  },
  {
    "question": "What are the most important emails I need to read today?",
    "label": "important_emails"
  },
  {
    "question": "List all CEO or board meeting invitations",
    "label": "important_emails"
  },
  {
    "question": "Show urgent client escalations",
    "label": "important_emails"
  }
]
------------STATRT
Got it—here are ready-to-paste GitHub Copilot prompts to turn your project into an MCP-style (Model Context Protocol) agent with local models, tools, and a vibrant Flask UI. Use them at the top of each file (or in Copilot Chat) and let Copilot scaffold the code.

0) How to use these prompts
Open/create the target file (e.g., mcp_server.py).

Paste the prompt at the very top as a multiline comment.

Start writing a function/class signature below; accept Copilot’s suggestions and iterate.

1) MCP server (FastAPI) + context store
File: mcp_server.py

python
Copy
Edit
"""
Build an MCP-style server using FastAPI that exposes tool endpoints with JSON schemas.
Requirements:
- No LangChain, no external AI APIs. Pure Python.
- In-memory ContextStore carrying: user_id, roles, last_intent, selected_emails (list[int]), pending_action, action_message, awaiting_confirmation (bool), interaction_history (list), email_index (dict[int, dict]).
- Endpoints (POST JSON):
  - /tools/classify_question {text} -> {category, confidence}
  - /tools/list_emails {category?, since?, from?, page?, size?} -> {items, next_cursor, counts}
  - /tools/send_email {indexes, message} -> {sent_ids, status}
  - /tools/mark_read {indexes} -> {updated_ids, status}
  - /tools/summarize_thread {message_ids[]} -> {summary}
- Each endpoint validates input against a Pydantic model; returns structured JSON with tool_response and updated_context.hash.
- RBAC check: deny mutating tools (send_email, mark_read) if user lacks "can_send".
- Idempotency: accept optional idempotency_key; ensure repeated sends are not duplicated.
- Logging: structured logs per tool call without storing email bodies.
- Add /healthz and /version endpoints.
"""
2) MCP tool contracts (schemas) + registry
File: tools/contracts.py

python
Copy
Edit
"""
Define Pydantic models (JSON schemas) for each MCP tool.
- ClassifyQuestionRequest/Response
- ListEmailsRequest/Response
- SendEmailRequest/Response
- MarkReadRequest/Response
- SummarizeThreadRequest/Response
Include field docs, examples, and validation (e.g., 1 <= index).
Create a ToolRegistry that maps 'tool_name' -> (request_model, response_model, handler).
"""
3) Context store & policy middleware
File: context_store.py

python
Copy
Edit
"""
Implement ContextStore:
- get_context(user_id) -> dict
- update_context(user_id, patch: dict) -> dict
- compute_hash(context) to return a short context version tag
- Optional: in-memory only; later replace with Redis without changing interface.

Implement PolicyGate:
- check_rbac(context, tool_name) -> raises if not allowed
- redact_output(data) -> remove PII-like fields (email bodies) before response
"""
4) Local models (scikit-learn) loader & predictors
File: models/runtime.py

python
Copy
Edit
"""
Load local scikit-learn pipelines from ./models:
- email_classifier.joblib  (subject+body -> label)
- question_classifier.joblib (question -> label)

Expose:
- predict_email_category(text) -> {label, proba}
- predict_question_category(text) -> {label, proba}

If models missing, return sensible fallbacks (keyword rules) but log a warning.
No network calls. Everything fully offline.
"""
5) MCP tool implementations (business logic)
File: tools/impl.py

python
Copy
Edit
"""
Implement handlers for each tool signature, using ContextStore + models:
- classify_question(req, context) -> uses question model; updates last_intent; returns {category, confidence}
- list_emails(req, context) -> filter context.email_index by category/from/since; return items[], counts per category, and page cursor
- send_email(req, context) -> RBAC check; apply idempotency_key; mark selected emails as sent; stamp message; return {sent_ids, status}
- mark_read(req, context) -> RBAC check; set 'is_read=True' for indexes; return {updated_ids}
- summarize_thread(req, context) -> (placeholder): concatenate subjects; or call local summarizer if available; return short summary

Ensure:
- never return full email bodies unless explicitly requested by a policy-allowed client
- all functions mutate context via ContextStore.update_context
- responses are shaped per contracts.py
"""
6) Email index adapter (Graph or IMAP metadata only)
File: adapters/email_index.py

python
Copy
Edit
"""
Create an EmailIndexAdapter that can load metadata-only messages into context.email_index.
- load_initial_index(context, source="mock") -> populate with 20-50 sample items (id, subject, sender, date, category?, status, is_read)
- Optionally implement a GraphAdapter skeleton (no credentials): methods signatures only and TODO notes for corporate integration.

All items should be safe for demos: no PII, no bodies by default.
"""
7) Flask UI (vibrant) bridging MCP server
File: app.py

python
Copy
Edit
"""
Build a Flask web UI that calls the MCP FastAPI tools via HTTP (localhost).
Layout:
- Two columns with Bootstrap 5:
  - Left: chat stream (user + agent bubbles), input box at bottom
  - Below chat: vibrant table (striped, hover, badges by category; Status: ✅/Pending)
- Right: sidebar cards showing:
  - Counts per category (badges or progress bars)
  - Tips: “show HR emails”, “send 1,2 with approved”, “mark 3 read”
Behavior:
- On submit:
  - If text starts with 'send' or 'mark', call MCP /tools/send_email or /tools/mark_read
  - Else call /tools/classify_question then /tools/list_emails with predicted category
- Auto-scroll chat to bottom; preserve session via Flask session cookie
Security:
- Sanitize/escape all user-rendered content
- No external JS; allow CDN Bootstrap only, or bundle locally if needed
"""
8) Training scripts (email + question classifiers)
File: train_email_classifier.py

python
Copy
Edit
"""
Write a script that:
- Reads data/email_training_data.json (list of {subject, body, label})
- Combines subject+body -> TF-IDF -> LogisticRegression
- Prints accuracy on a holdout set
- Saves to models/email_classifier.joblib
Add CLI args: --input, --output, --test-size, --max-features
"""
File: train_question_classifier.py

python
Copy
Edit
"""
Write a script that:
- Reads data/question_training_data.json (list of {question, label})
- TF-IDF -> LogisticRegression
- Prints accuracy and confusion matrix
- Saves to models/question_classifier.joblib
Add CLI args like the email trainer.
"""
9) Bootstrap template + vibrant styles
File: templates/chat.html

python
Copy
Edit
"""
Produce a responsive Bootstrap 5 template:
- Left column (col-9): chat window (scrollable, rounded cards), input form at bottom
- Email table with: #, Subject, Sender, Date, Category (badge colors: HR=primary, IT=danger, Finance=success, Security=warning), Status
- Right column (col-3): cards showing counts per category, recent actions, and quick tips
- Use a vibrant color palette and soft shadows; support dark-mode via data-bs-theme
"""
File: static/style.css

python
Copy
Edit
"""
Add vibrant theming:
- Chat bubbles (agent vs user)
- Table row hover, striped, subtle shadows
- Category badges with custom colors
- Sticky right sidebar; responsive breakpoints
"""
10) Tests & ops
File: test/test_tools.py

python
Copy
Edit
"""
Unit tests for tool handlers:
- classify_question returns a valid category and confidence in [0,1]
- list_emails filters/paginates correctly
- send_email respects RBAC and idempotency
- mark_read updates flags
- summarize_thread returns non-empty summary
Use pytest; mock ContextStore and inject sample email_index.
"""
File: requirements.txt

python
Copy
Edit
"""
List pinned packages: fastapi, uvicorn, flask, pydantic, scikit-learn, joblib, pandas (optional), python-dotenv (optional).
"""
